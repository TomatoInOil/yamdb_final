name: Yamdb workflow

on:
  push:
    branches: [ "master" ]

jobs:
  test:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r api_yamdb/requirements.txt
      - name: Test the code for PEP8 compliance. Run Django app tests
        run: |
          python -m flake8
          cd api_yamdb/
          python manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-20.04
    needs: test
  
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          file: ./api_yamdb/Dockerfile
          context: ./api_yamdb
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api_yamdb:latest

  set_env:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Executing remote ssh commands to set env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export SECRET_KEY=${{ secrets.SECRET_KEY }}
            export DB_ENGINE=${{ secrets.DB_ENGINE }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            touch .env
  deploy:
    runs-on: ubuntu-20.04
    needs: set_env
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Prepare to connect the docker to the server
      uses: kielabokkie/ssh-key-and-known-hosts-action@v1
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}
        ssh-host: ${{ secrets.HOST }}
    - name: Install Docker
      run: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo pip install docker-compose
    - name: asd
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/api_yamdb:latest
        docker-compose --context ${{ secrets.CONTEXT_NAME }} down
        docker volume rm ${{ secrets.STATIC_VALUE }}
        cd infra/
        docker-compose --context ${{ secrets.CONTEXT_NAME }} up -d --force-recreate

  send_message:
    runs-on: ubuntu-20.04
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
